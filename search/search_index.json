{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83e\uddf5CommonThread\ud83e\uddf5","text":"<p>CommonThread is an open-source collaborative tool that enables users to turn stories into insights. Community-based organizations, journalists, researchers, and community members alike can use the tool to efficiently gather stories, aggregate them, and understand common threads to draw insights for action.</p>"},{"location":"#set-up-hammer","title":"Set Up :hammer:","text":"<p>To set up a local development environment, follow these steps:</p> <ol> <li>Install UV: If you haven't already, install UV</li> <li>Sync the Environment: After installing UV, you need to sync the environment. This will set up the necessary configurations and dependencies for your project. Run the following command:</li> </ol> <pre><code>uv sync\n</code></pre>"},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#conceptual-design","title":"Conceptual Design","text":"<p>The Architecture of Common Thread is centered around the story- our base unit of data.</p> <p>The story is a block of text or some recorded audio/video that is based on a prompt of some kind. Stories responding to the same or similar prompts are grouped together as projects, which are themselves grouped under organizations. Stories have tags, fields of additional information, attached to them with details like location, date, etc.</p> <p>For users, this looks like this: A user creates (or joins) an organization, and then creates a project under which to collect stories. From there, they are either sharing story input forms with people or using the form themselves to enter stories. Having collected these stories, they can analyze them individually or in the project groups, for use in whatever means they are looking to use them.</p>"},{"location":"architecture/#nuts-and-bolts","title":"Nuts and Bolts","text":"<p>There are two main pieces of the architecture, with some smaller components that will be noted along the way.</p> <ol> <li>Svelte Frontend</li> </ol> <p>Svelte handles the visuals of displaying webpages, the forms and user input collection, and passing things such as login tokens to the user. It treats the backend as an API, sending requests and manipulating the data received as necessary for visualization on the front-end. It is also where we pass cookies/tokens to the user to enable login/authentication.</p> <ol> <li>Django Backend</li> </ol> <p>The Django Backend serves as the intermediary between user and data. This is where: - Requests to store, get, or modify data are handled and pulled from/passed to the database - Generates necessary tokens for login authetication &amp; checks authentication when users try things - More advanced analysis processes are run when requested</p> <p>Note that as a result of our design, we are not using Django's views/templates default setup, but rather passing more API-style responses to the frontend.</p> <p>The PostgreSQL Database</p> <p>The Postgres database is a separate component but it's setup, design, and access are managed through the Django backend. This is done through the Models setup Django uses to set up databases for applications.</p> <p>The Login/Authentication system</p> <p>JWT Tokens manage the users and their access to their own data by passing information on which organizations users have access to, and to what level, in order to keep data private. These tokens are created on the backend, passed to and stored via the frontend, then reverified by the backend when users attempt to access certain pages.</p> <p>ML Task Scheduler</p> <p>There will be a processing trigger with a queue managed by the scheduler for ML-related analysis tasks, where the queue is implemented with the scheduler and a postgreSQL queue table. Designed to help manage tasks that might run slowly, particularly if users are specifically requesting them on the spot.</p>"},{"location":"architecture/#data-flow-dependency","title":"Data Flow / Dependency","text":"<p>This is best described in two segments: The input and output.</p> <p>For input, there is a straightforward heirarchy:</p> <ol> <li>Users are created, information stored</li> <li>Users create organizations (and add other users to them), information is stored.</li> <li>Users create projects within an organization and define which tags they want to require/request for that group of stories, and that info is stored. Tags are characteristcs that might be useful or required for analysis: A location for mapping restaurant reviews, an age group for stories about children in school.</li> <li>Users add stories to projects, where tags are assigned manually or automatically.</li> <li>Stories and their associated tags are stored with reference to the project they are under.</li> </ol> <p>For output, there are many pages dealing with heirarchy of data organization or management, such as organization or project overview pages. These pages primarily draw in a straightforward manner from the database, filtering based on heirarchical association (user to org, org to project, project to story). </p> <p>Any processing or analysis will be based on stories &amp; associated tags.</p> <p>For Story-related output:</p> <p>When simple data or analysis is requested: 1. The database is queried for a filtering of stories based on the organization or project they are under. 2. The tags associated with those stories are pulled, so that they can be used to sort, filter, search, and help analyze the stories. 3. The results are formatted and returned to the API request.</p> <p>IE: A user wants how many stories from schoolchildren are from the high school, middle school, and elementary school respectively. The request is received from the frontend. The backend queries the database for the stories and their associated age group tag, with the Project these stories are in as the filter. The backend then formats the stories and tags appropriately and passes them to frontend, where the counts of each group within the age group tag are displayed.</p> <p>For more advanced analysis, there is an additional step, which is that the results of queries to any ML API used will be stored within the database, and then requests will draw from the stored results.</p>"},{"location":"endpoints/","title":"API Endpoint Documentation","text":""},{"location":"endpoints/#table-of-contents","title":"Table of Contents","text":"<p>Users - POST /users/create - POST /users/log_in - GET /users/{user_id} Organizations - POST /orgs/create - POST /orgs/add_user - GET /orgs/{org_id} - GET /orgs/{org_id}/admin Projects - POST /projects/create - GET /projects/{project_id} Tags - GET /tags Stories - POST /stories/create - GET /stories - GET /stories/{story_id}</p>"},{"location":"endpoints/#users","title":"Users","text":""},{"location":"endpoints/#1-post-userscreate","title":"1. POST /users/create","text":"<p>Description: Creates a new user account.</p> <p>Parameters: - <code>display_name</code> (required) - User's display name - <code>username</code> (required) - User's email address - <code>password</code> (required) - User's password  </p> <p>Actions: - Add new record to User table - Add new record to Login table - Send email confirmation  </p> <p>Response: - User ID - Redirect to <code>/log_in</code> if successful  </p> <p>HTTP Status: 201 Created</p>"},{"location":"endpoints/#2-post-userslog_in","title":"2. POST /users/log_in","text":"<p>Description: Authenticates a user and creates session tokens.</p> <p>Parameters: - <code>username</code> (required) - User's email address - <code>password</code> (required) - User's password  </p> <p>Actions: - Validate credentials in Login table - Create token for authentication  </p> <p>Response: - Access and refresh tokens  </p> <p>HTTP Status: 200 OK</p>"},{"location":"endpoints/#3-get-usersuser_id","title":"3. GET /users/{user_id}","text":"<p>Description: Retrieves a user's profile information.</p> <p>Parameters: - <code>user_id</code> (required) - User ID - <code>org_id</code> (optional) - Organization ID - <code>project_id</code> (optional) - Project ID  </p> <p>Actions: - Gets a user from the User table  </p> <p>Response: - A single User object  </p> <p>HTTP Status: 201 Created</p>"},{"location":"endpoints/#organizations","title":"Organizations","text":""},{"location":"endpoints/#4-post-orgscreate","title":"4. POST /orgs/create","text":"<p>Description: Creates a new organization.</p> <p>Parameters: - <code>organization_name</code> (required) - Name of the organization - <code>access_token</code> (required) - Authentication token  </p> <p>Actions: - Add new record for Org in Organizations table  </p> <p>Response: - Organization ID  </p> <p>HTTP Status: 201 Created</p>"},{"location":"endpoints/#5-post-orgsadd_user","title":"5. POST /orgs/add_user","text":"<p>Description: Adds users to an organization.</p> <p>Parameters: - <code>organization_id</code> (required) - Organization ID - <code>valid_users</code> (required) - List of users to add - <code>user_permission</code> (optional) - Permission level for users - <code>access_token</code> (required) - Authentication token  </p> <p>Actions: - Add new records for valid users in OrgUser table  </p> <p>Response: - User ID  </p> <p>HTTP Status: 201 Created</p>"},{"location":"endpoints/#6-get-orgsorg_id","title":"6. GET /orgs/{org_id}","text":"<p>Description: Retrieves organization dashboard data.</p> <p>Parameters: - <code>org_id</code> (required) - Organization ID - <code>user_id</code> (required) - User ID  </p> <p>Actions: - Queries the Projects table and the Stories table by User ID and Org ID  </p> <p>Response: - List of Projects and Stories with tags  </p> <p>Note: This endpoint is still TBD.</p>"},{"location":"endpoints/#7-get-orgsorg_idadmin","title":"7. GET /orgs/{org_id}/admin","text":"<p>Description: Retrieves organization administration data.</p> <p>Parameters: - <code>org_id</code> (required) - Organization ID  </p> <p>Actions: - Query the Users table - Update permission status  </p> <p>Response: - Data frame with UserIDs and Authorization Levels</p>"},{"location":"endpoints/#projects","title":"Projects","text":""},{"location":"endpoints/#8-post-projectscreate","title":"8. POST /projects/create","text":"<p>Description: Creates a new project.</p> <p>Parameters: - <code>org_id</code> (required) - Organization ID - <code>project_name</code> (required) - Project name - <code>creator</code> (required) - User creating the project - <code>necessary_fields_story_tags</code> (required) - Required tags for stories - <code>optional_fields_story_tags</code> (optional) - Optional tags for stories - <code>session_token</code> (required) - Authentication token  </p> <p>Actions: - Add a new record for the project in the Project table - Add new records for tags in the Tag table - Add new records to the ProjectTag table  </p> <p>Response: - Project ID  </p> <p>HTTP Status: 201 Created</p>"},{"location":"endpoints/#9-get-projectsproject_id","title":"9. GET /projects/{project_id}","text":"<p>Description: Retrieves project dashboard data.</p> <p>Parameters: - <code>project_id</code> (required) - Project ID  </p> <p>Actions: - Get project table data  </p> <p>Response: - TBD</p>"},{"location":"endpoints/#tags","title":"Tags","text":""},{"location":"endpoints/#10-get-tags","title":"10. GET /tags","text":"<p>Description: Retrieves tags associated with a project.</p> <p>Parameters: - <code>project_id</code> (required) - Project ID  </p> <p>Response: - All required and optional tags  </p> <p>Notes: Used to populate the frontend form.</p>"},{"location":"endpoints/#stories","title":"Stories","text":""},{"location":"endpoints/#11-post-storiescreate","title":"11. POST /stories/create","text":"<p>Description: Creates a new story entry.</p> <p>Parameters: - <code>content</code> (required) - Story content - <code>curator</code> (required) - User creating the entry - <code>storyteller</code> (required) - Person telling the story - <code>date</code> (required) - Date of the story - <code>required_fields</code> (required) - Required tag fields - <code>optional_fields</code> (optional) - Optional tag fields  </p> <p>Actions: - Add a new record to the Story table - Add new records to the StoryTag table  </p> <p>Response: - Story ID  </p> <p>HTTP Status: 201 Created</p>"},{"location":"endpoints/#12-get-stories","title":"12. GET /stories","text":"<p>Description: Retrieves a list of stories.</p> <p>Parameters: - <code>org_id</code> (required) - Organization ID - <code>project_id</code> (optional) - Project ID  </p> <p>Actions: - Query the Story table and the StoryTag table  </p> <p>Response: - List of stories with specific details  </p> <p>HTTP Status: 201 Created</p>"},{"location":"endpoints/#13-get-storiesstory_id","title":"13. GET /stories/{story_id}","text":"<p>Description: Retrieves a single story.</p> <p>Parameters: - <code>story_id</code> (required) - Story ID  </p> <p>Actions: - Query the Story table and related StoryTag records  </p> <p>Response: - A single story object  </p> <p>HTTP Status: 201 Created</p>"},{"location":"models/","title":"Data Models","text":"<p>CustomUser</p> Name Type Description user_id PrimaryKey user's unique identifier name varchar display name <p>UserLogin</p> Name Type Description user_id OneToOne (ForeignKey) links to <code>CustomUser</code> username varchar login username (unique) password varchar login password <p>Organization</p> Name Type Description org_id PrimaryKey organization's unique identifier name varchar organization name <p>Project</p> Name Type Description proj_id PrimaryKey project's unique identifier org_id ForeignKey links to <code>Organization</code> name varchar project name curator ForeignKey links to <code>CustomUser</code> date date project created date <p>Story</p> Name Type Description story_id PrimaryKey story's unique identifier proj_id ForeignKey links to <code>Project</code> org_id ForeignKey links to <code>Organization</code> storyteller varchar storyteller's name curator ForeignKey links to <code>CustomUser</code> date date project created date content text story content ml_metadata metadata ml_metadata <p>Tag</p> Name Type Description tag_id PrimaryKey tag unique identifier name varchar tag name <p>StoryTag</p> Name Type Description story_tag_id PrimaryKey story tag unique identifier story_id ForeignKey links to <code>Story</code> tag_id ForeignKey links to <code>Tag</code> <p>ProjectTag</p> Name Type Description proj_tag_id PrimaryKey project tag unique identifier proj_id ForeignKey links to <code>Project</code> tag_id ForeignKey links to <code>Tag</code> <p>OrgUser</p> Name Type Description org_user_id PrimaryKey project tag unique identifier user_id ForeignKey links to <code>Organization</code> org_id ForeignKey links to <code>User</code> access varchar access level <p>ML_Story_Insights</p> Name Type Description story_id OneToOne (ForeignKey) links to <code>Story</code> summary varchar ml generated summary of story insight varchar ml generated insights of story sentiments json ml generated sentiments of story entities json ml generated entities of story generated_tags json ml generated tags of story translation varchar ml generated translation of story model_configuration json ml model configuration of story"}]}